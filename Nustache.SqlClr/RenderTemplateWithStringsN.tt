<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using Microsoft.SqlServer.Server;
using Nustache.Core;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
namespace Nustache.SqlClr
{
	public static partial class UserDefinedFunctions
	{
<#
	for(var i = 1; i<=16; i+=1)
	{
#>
		/// <summary>
        /// Renders the given Mustache template with the name/value arguments assembled into a parameter data object.
		/// All arguments must have string-value of length < 2000, longer string-values have not been tested.
        /// </summary>
        /// <param name="template">A Mustache template.</param>
<#
		for(var j = 1; j<=i; j+=1)
		{
#>
        /// <param name="name<#= j #>">The name of template data parameter <#= j #>.</param>
        /// <param name="value<#= j #>">The value of template data parameter <#= j #>.</param>
<#
		}
#>
        /// <returns>The rendered template with all parameters replaced.</returns> 
        [SqlFunction(DataAccess = DataAccessKind.None, IsDeterministic = true)]
        [return: SqlFacet(MaxSize = -1, IsNullable = true)]
        public static SqlString  RenderTemplateWithStrings<#= i #>(
            [SqlFacet(MaxSize = -1, IsNullable = true)] SqlString template
<#
		for(var j = 1; j<=i; j+=1)
		{
#>
            , [SqlFacet(MaxSize = 2000, IsNullable = false)] SqlString name<#= j #>
            , [SqlFacet(MaxSize = -1, IsNullable = true)] SqlString value<#= j #>
<#
		}
#>
        )
        {
            InitializeNustache();

            var paramDict = new Dictionary<string, string>()
            {
<#
		for(var j = 1; j<=i; j+=1)
		{
#>
                { name<#= j #>.Value, value<#= j #>.Value }<#= j == i ? "" : "," #>
<#
		}
#>
            };

            return Render.StringToString(template.Value, paramDict);
        }

<#
    }
#>
	}
}